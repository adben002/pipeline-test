AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Static web site stack with CodePipeline and CodeBuild deployment from
  CodeCommit repository. Includes redirect from www to base domain, access
  logs written to S3, SSL via Amazon Certificate Manager, CloudFront CDN, and
  Route 53 DNS entries. S3 access logs analysis and visualization using Elasticsearch and Kibana.
Parameters:
  # Domain: example.com
  DomainName:
    Type: String
    Description: "The base domain name for the web site (no 'www')"

Mappings:
  RegionMap:
    ap-northeast-1:
      S3hostedzoneID: "Z2M4EHUR26P7ZW"
      websiteendpoint: "s3-website-ap-northeast-1.amazonaws.com"
    ap-northeast-2:
      S3hostedzoneID: "Z3W03O7B5YMIYP"
      websiteendpoint: "s3-website.ap-northeast-2.amazonaws.com"
    ap-south-1:
      S3hostedzoneID: "Z11RGJOFQNVJUP"
      websiteendpoint: "s3-website.ap-south-1.amazonaws.com"
    ap-southeast-1:
      S3hostedzoneID: "Z3O0J2DXBE1FTB"
      websiteendpoint: "s3-website-ap-southeast-1.amazonaws.com"
    ap-southeast-2:
      S3hostedzoneID: "Z1WCIGYICN2BYD"
      websiteendpoint: "s3-website-ap-southeast-2.amazonaws.com"
    eu-central-1:
      S3hostedzoneID: "Z21DNDUVLTQW6Q"
      websiteendpoint: "s3-website.eu-central-1.amazonaws.com"
    eu-west-1:
      S3hostedzoneID: "Z1BKCTXD74EZPE"
      websiteendpoint: "s3-website-eu-west-1.amazonaws.com"
    sa-east-1:
      S3hostedzoneID: "Z7KQH4QJS55SO"
      websiteendpoint: "s3-website-sa-east-1.amazonaws.com"
    us-east-1:
      S3hostedzoneID: "Z3AQBSTGFYJSTF"
      websiteendpoint: "s3-website-us-east-1.amazonaws.com"
    us-east-2:
      S3hostedzoneID: "Z2O1EMRO9K5GLX"
      websiteendpoint: "s3-website.us-east-2.amazonaws.com"
    us-west-1:
      S3hostedzoneID: "Z2F56UZL2M1ACD"
      websiteendpoint: "s3-website-us-west-1.amazonaws.com"
    us-west-2:
      S3hostedzoneID: "Z3BJ6K6RIION7M"

Resources:

  # Bucket to redirect to example.com: www.example.com
  RedirectBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "www.${DomainName}"
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref DomainName
          Protocol: https
    DeletionPolicy: Delete

  # Bucket for site content: example.com
  SiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref DomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Delete

  # CDN serves S3 content over HTTPS for example.com
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Ref DomainName
        DefaultRootObject: index.html
        PriceClass: PriceClass_All
        Origins:
          - DomainName:
              !Join [
                  "",
                [
                  !Ref DomainName,
                  ".",
                  !FindInMap [RegionMap, !Ref "AWS::Region", websiteendpoint],
                ],
              ]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 30
          MinTTL: 5
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !GetAtt IssuedCertificate.CertificateArn
          SslSupportMethod: sni-only

  # CDN serves S3 content over HTTPS for www.example.com
  RedirectCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases: !Ref RedirectBucket
        PriceClass: PriceClass_100
        Origins:
          - DomainName:
              !Join [
                  "",
                [
                  !Ref RedirectBucket,
                    ".",
                  !FindInMap [RegionMap, !Ref "AWS::Region", websiteendpoint],
                ],
              ]
            Id: RedirectS3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: RedirectS3Origin
          AllowedMethods:
            - GET
            - HEAD
          DefaultTTL: 30
          MinTTL: 5
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        ViewerCertificate:
          AcmCertificateArn: !GetAtt IssuedCertificate.CertificateArn
          SslSupportMethod: sni-only

  # DNS: example.com, www.example.com
  Route53HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: !Sub "Created by CloudFormation stack: ${AWS::StackName}"
      Name: !Ref DomainName
    DeletionPolicy: Delete

  Route53RecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
        # example.com
        - Name: !Sub "${DomainName}."
          Type: A
          # Resolve to CloudFront distribution
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
            DNSName: !GetAtt CloudFrontDistribution.DomainName
        # www.example.com
        - Name: !Sub "www.${DomainName}."
          Type: A
          # Resolve to Redirect CloudFront distribution
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
            DNSName: !GetAtt RedirectCloudFrontDistribution.DomainName

  # Create and validate certificate role
  CertificateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: CFNCertificateDomainResourceRecordProvider
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - acm:RequestCertificate
                  - acm:DescribeCertificate
                  - acm:UpdateCertificateOptions
                  - acm:DeleteCertificate
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource:
                  !Join [
                      "",
                    [
                        "arn:aws:route53:::hostedzone/",
                        !Ref Route53HostedZone,
                    ],
                  ]
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*

  # Lambda to create and validate certificate
  CreateAndValidateCertificateLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to create and validate certificate
      Handler: certificateValidator.handler
      Role: !GetAtt CertificateLambdaRole.Arn
      Code:
        S3Bucket: !Join
          - ""
          - - !ImportValue LambdaCodeBucket
        S3Key: "certificate-validator/certificateValidator.zip"
      Environment:
        Variables:
          EXEC_THRESHOLD_SECONDS: 200
      Timeout: 300
      Runtime: nodejs6.10

  # Certificate for HTTPS accesss through CloudFront
  Certificate:
    Type: Custom::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      ServiceToken: !GetAtt CreateAndValidateCertificateLambda.Arn

  # Check ACM Certificate validity status
  IssuedCertificate:
    Type: Custom::IssuedCertificate
    Properties:
      CertificateArn: !GetAtt Certificate.CertificateArn
      LambdaArn: !GetAtt CreateAndValidateCertificateLambda.Arn
      Region: !Ref "AWS::Region"
      ServiceToken: !GetAtt CreateAndValidateCertificateLambda.Arn
    DependsOn: DomainValidationRecord

  # Generates DNS Record for certificate
  CertificateDNSRecord:
    Type: Custom::CertificateDNSRecord
    Properties:
      CertificateArn: !GetAtt Certificate.CertificateArn
      ServiceToken: !GetAtt CreateAndValidateCertificateLambda.Arn

  # Validates certificate by adding record in DNS.
  DomainValidationRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
        - Name: !GetAtt CertificateDNSRecord.Name
          Type: "CNAME"
          TTL: 300
          ResourceRecords:
            - !GetAtt CertificateDNSRecord.Value
